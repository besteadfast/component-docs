import{_ as s,c as a,o as e,a1 as t}from"./chunks/framework.BQiZN-Cb.js";const E=JSON.parse('{"title":"Getting Started","description":"","frontmatter":{},"headers":[],"relativePath":"getting-started.md","filePath":"getting-started.md"}'),i={name:"getting-started.md"},n=t(`<h1 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting Started&quot;">​</a></h1><p>Welcome to the component library!</p><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h2><p>This component library is already built into the Carbon repo, so as long as you&#39;ve followed the Carbon Docs to get that up and running, you will have all of these components out of the box.</p><h2 id="filesystem" tabindex="-1">Filesystem <a class="header-anchor" href="#filesystem" aria-label="Permalink to &quot;Filesystem&quot;">​</a></h2><p>The components from this library are housed in <code>src &gt; js &gt; components &gt; libraryname</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>...</span></span>
<span class="line"><span>├─ libraryname</span></span>
<span class="line"><span>│  ├─ Modal.vue</span></span>
<span class="line"><span>│  ├─ Accordion.vue</span></span>
<span class="line"><span>│  ├─ Dropdown.vue</span></span>
<span class="line"><span>│  └─ primitives</span></span>
<span class="line"><span>│     ├─ BaseModal.vue</span></span>
<span class="line"><span>│     ├─ BaseAccordion.vue</span></span>
<span class="line"><span>│     └─ BaseDropdown.vue</span></span>
<span class="line"><span>...</span></span></code></pre></div><ul><li><p><strong>libraryname</strong>: root folder containing all component-related code. Files that are directly contained in this folder are components to be implemented by developers (and are automatically registered in vue)</p></li><li><p><strong>primitives</strong>: folder containing base components. These define the functionality of the components and should not be touched by developers</p></li></ul><h2 id="configuring-the-components" tabindex="-1">Configuring the components <a class="header-anchor" href="#configuring-the-components" aria-label="Permalink to &quot;Configuring the components&quot;">​</a></h2><p>The components have some baseline style, but in order to fit them into a project, it will be necessary to modify the component files. Either at the beginning of the project or when they are first used, the following items should be modified:</p><h3 id="outward-facing-props" tabindex="-1">Outward-facing Props <a class="header-anchor" href="#outward-facing-props" aria-label="Permalink to &quot;Outward-facing Props&quot;">​</a></h3><p>Make sure any content that needs to come in from twig is able to be passed into the component.</p><p>For example, if a title needs to be passed in:</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{ title }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> props</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ title: String });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>This will allow you to use the compoenent in twig like so:</p><div class="language-twig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">twig</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{% </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> craft.entries().one() %}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">component</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">entry</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">title</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span></code></pre></div><h3 id="styles" tabindex="-1">Styles <a class="header-anchor" href="#styles" aria-label="Permalink to &quot;Styles&quot;">​</a></h3><p>Using tailwind classes, modify <code>xClasses</code> props being passed into the base component and classes on the component itself to match the style of the design</p><h3 id="content" tabindex="-1">Content <a class="header-anchor" href="#content" aria-label="Permalink to &quot;Content&quot;">​</a></h3><p>Pass the proper content into slots to fill out content areas with the correct templating. This involve creating props to pass content in from twig.</p><h2 id="about-the-library" tabindex="-1">About the library <a class="header-anchor" href="#about-the-library" aria-label="Permalink to &quot;About the library&quot;">​</a></h2><p>This is a library of components developed by Steadfast with the purpose of simplifying the development process for new sites. The goal is to save development time by eliminating the need to recreate components on every project. By leveraging HeadlessUI, we have created a library of customizable and accessible base layouts/styles for our most reused components.</p>`,22),l=[n];function o(p,h,r,d,c,k){return e(),a("div",null,l)}const y=s(i,[["render",o]]);export{E as __pageData,y as default};
